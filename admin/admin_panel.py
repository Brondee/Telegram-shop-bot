from aiogram.dispatcher.filters.state import State, StatesGroup
from aiogram.dispatcher import FSMContext
from aiogram import types, Dispatcher
import sys
#importing bot
sys.path.append("/telegram_bot")
from create_bot import bot, dp
#importing functions related to db
sys.path.append("/telegram_bot/db")
from connector import sql_start, add_game, add_value, del_game
#importing all markups from file
sys.path.append("/telegram_bot/markups")
from markups import admin_markup, sub_res_markup

ID = None

class AddGame(StatesGroup):
    name = State()
    price_day = State()
    price_week = State()
    deposit = State()
    photo = State()
class SetAvailable(StatesGroup):
    game_name = State()
class DeleteGame(StatesGroup):
    game_name_del = State()

game_info = {}

#admin panel activation
@dp.message_handler(lambda message: "–ê–¥–º–∏–Ω –ø–∞–Ω–µ–ª—å" in message.text, is_chat_admin = True)
async def admin_panel(message: types.Message):
    global ID
    ID = message.from_user.id
    await bot.send_message(message.from_user.id, "üìü –ê–¥–º–∏–Ω –ø–∞–Ω–µ–ª—å, –≤—ã–±–µ—Ä–∏—Ç–µ –¥–µ–π—Å—Ç–≤–∏–µ:", reply_markup = admin_markup)
    await message.delete()

#add new game begining
@dp.message_handler(lambda message: "üé≤ –î–æ–±–∞–≤–∏—Ç—å –Ω–æ–≤—É—é –∏–≥—Ä—É" in message.text, state = None)
async def adm_start(message: types.Message):
    if message.from_user.id == ID:
        await AddGame.name.set()
        await bot.send_message(message.chat.id, "üìñ –í–≤–µ–¥–∏ –Ω–∞–∑–≤–∞–Ω–∏–µ –∏–≥—Ä—ã")

#asserts game's name to state
@dp.message_handler(state = AddGame.name)
async def load_name(message: types.Message, state: FSMContext):
    if message.from_user.id == ID:
        async with state.proxy() as data:
            data['name'] = message.text
        await AddGame.next()
        await bot.send_message(message.chat.id, "üí∏ –¢–µ–ø–µ—Ä—å –≤–≤–µ–¥–∏ —Ü–µ–Ω—É –∞—Ä–µ–Ω–¥—ã –∑–∞ —Å—É—Ç–∫–∏")

#asserts game's price per day to state
@dp.message_handler(state = AddGame.price_day)
async def load_price_day(message: types.Message, state: FSMContext):
    if message.from_user.id == ID:
        async with state.proxy() as data:
            data['day_price'] = message.text
        await AddGame.next()
        await bot.send_message(message.chat.id, "üíµ –¢–µ–ø–µ—Ä—å –≤–≤–µ–¥–∏ —Ü–µ–Ω—É –∞—Ä–µ–Ω–¥—ã –∑–∞ –Ω–µ–¥–µ–ª—é")

#asserts game's price per week to state
@dp.message_handler(state = AddGame.price_week)
async def load_price_week(message: types.Message, state: FSMContext):
    if message.from_user.id == ID:
        async with state.proxy() as data:
            data["week_price"] = message.text
        await AddGame.next()
        await bot.send_message(message.chat.id, "üí∞ –¢–µ–ø–µ—Ä—å –≤–≤–µ–¥–∏ —Å—É–º–º—É –∑–∞–ª–æ–≥–∞")

#asserts game's deposit price to state
@dp.message_handler(state = AddGame.deposit)
async def load_deposit(message: types.Message, state: FSMContext):
    if message.from_user.id == ID:
        async with state.proxy() as data:
            data["deposit"] = message.text
        await AddGame.next()
        await bot.send_message(message.chat.id, "üèû –¢–µ–ø–µ—Ä—å –∑–∞–≥—Ä—É–∑–∏ —Ñ–æ—Ç–æ –∏–≥—Ä—ã")

#asserts game's photo to state
@dp.message_handler(content_types = ["photo"], state = AddGame.photo)
async def load_photo(message: types.Message, state: FSMContext):
    if message.from_user.id == ID:
        global game_info
        async with state.proxy() as data:
            data['photo'] = message.photo[0].file_id
        async with state.proxy() as data:
            await bot.send_message(message.chat.id, "üìã –í–≤–µ–¥–µ–Ω–Ω–∞—è –∏–Ω—Ñ–æ—Ä–º–∞—Ü–∏—è:", reply_markup = sub_res_markup)
            await bot.send_message(message.chat.id, f"–ù–∞–∑–≤–∞–Ω–∏–µ: {data['name']}\n–¶–µ–Ω–∞ –∑–∞ –¥–µ–Ω—å: {data['day_price']}\n–¶–µ–Ω–∞ –∑–∞  –Ω–µ–¥–µ–ª—é: {data['week_price']}\n–ó–∞–ª–æ–≥: {data['deposit']}")
            game_info = data
        await state.finish()

#adds all info about a new game to db
@dp.message_handler(lambda message: "‚úÖ –î–æ–±–∞–≤–∏—Ç—å" in message.text)
async def add_games(message: types.Message):
    if message.from_user.id == ID:
        global game_info
        if game_info != {}:
            sql_start()
            await add_game(game_info['name'], game_info['day_price'], game_info['week_price'], game_info['deposit'], game_info['photo'])
            await bot.send_message(message.chat.id, "üü¢ –ò–≥—Ä–∞ –¥–æ–±–∞–≤–ª–µ–Ω–∞ –≤ –±–∞–∑—É –¥–∞–Ω–Ω—ã—Ö", reply_markup = admin_markup)
        elif game_info == {}:
            await bot.send_message(message.chat.id, "üî¥ –°–Ω–∞—á–∞–ª–∞ –≤–≤–µ–¥–∏—Ç–µ –¥–∞–Ω–Ω—ã–µ –Ω–æ–≤–æ–π –∏–≥—Ä—ã")

#if text message = reset, resets all info 
@dp.message_handler(lambda message: "üóØ –°–±—Ä–æ—Å–∏—Ç—å" in message.text)
async def reset_info(message: types.Message):
    if message.from_user.id == ID:
        await bot.send_message(message.chat.id, "üìÇ –ò–∑–º–µ–Ω–µ–Ω–∏—è —Å–±—Ä–æ—à–µ–Ω—ã", reply_markup = admin_markup)

#if message text = delete game
@dp.message_handler(lambda message: "üí• –£–¥–∞–ª–∏—Ç—å –∏–≥—Ä—É" in message.text)
async def delete_game(message: types.Message):
    await DeleteGame.game_name_del.set()
    await bot.send_message(message.chat.id, "‚å®Ô∏è –í–≤–µ–¥–∏ –Ω–∞–∑–≤–∞–Ω–∏–µ –∏–≥—Ä—ã, –∫–æ—Ç–æ—Ä–æ—É—é –Ω—É–∂–Ω–æ —É–¥–∞–ª–∏—Ç—å")

#deletes a game from db
@dp.message_handler(state = DeleteGame.game_name_del)
async def delete_game_db(message: types.Message, state: FSMContext):
    if message.from_user.id == ID:
        game_name = message.text
        sql_start()
        await del_game(game_name)
        await bot.send_message(message.chat.id, f"‚òÑÔ∏è –ò–≥—Ä–∞ '{game_name}' —É–¥–∞–ª–µ–Ω–∞ –∏–∑ –±–∞–∑—ã –¥–∞–Ω–Ω—ã—Ö")
        await state.finish()

#if message text = set avalailable
@dp.message_handler(lambda message: "üì™ –í–µ—Ä–Ω—É—Ç—å –≤ –Ω–∞–ª–∏—á–∏–µ" in message.text)
async def set_av_name(message: types.Message):
    if message.from_user.id == ID:
        await SetAvailable.game_name.set()
        await bot.send_message(message.chat.id, "üè∑ –í–≤–µ–¥–∏ –Ω–∞–∑–≤–∞–Ω–∏–µ –∏–≥—Ä—ã, –∫–æ—Ç–æ—Ä–æ–π –Ω—É–∂–Ω–æ –≤–µ—Ä–Ω—É—Ç—å —Å—Ç–∞—Ç—É—Å '–í –Ω–∞–ª–∏—á–∏–µ'")

#gets game's name and sets it available
@dp.message_handler(state = SetAvailable.game_name)
async def set_av(message: types.Message, state: FSMContext):
    if message.from_user.id == ID:
        async with state.proxy() as name:
            name['game_name'] = message.text
            sql_start()
            add_value(name["game_name"], 1)
            await bot.send_message(message.chat.id, f"üéâ –ò–≥—Ä–∞ '{name['game_name']}' —Ç–µ–ø–µ—Ä—å —Å–Ω–æ–≤–∞ –≤ –Ω–∞–ª–∏—á–∏–∏!")
        await state.finish()